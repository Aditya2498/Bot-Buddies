{"version":3,"sources":["components/Card.js","components/Cardlist.js","components/Searchbox.js","robots.js","components/Scroll.js","components/Error.js","containers/App.js","serviceWorker.js","index.js"],"names":["card","name","email","id","className","alt","src","Cardlist","robots","map","user","i","Card","key","Searchbox","searchfield","searchChange","type","placeholder","onChange","username","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchchange","event","target","value","fetch","then","response","json","users","filterbots","filter","toLowerCase","includes","length","Error","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.f4bac741.chunk.js","sourcesContent":["import React from 'react';\r\nconst card  = ({name,email,id }) => {\r\n \r\n    return(\r\n        <div className='tc bg-light-blue dib br3 pa3 ma2 grow bw2 shadow-5' >\r\n            <img alt = 'bots' src = {`https://robohash.org/${id}?200x200`} />\r\n            <div>\r\n              <h2>{name}</h2>\r\n              <p>{email}</p>\r\n            </div>\r\n        </div>\r\n      \r\n    );\r\n}\r\n\r\nexport default card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst Cardlist = ({robots}) =>{\r\n \r\n    \r\nreturn( <div>\r\n       { \r\n        robots.map((user,i) => {\r\n         return (\r\n         <Card \r\n           key={i}  \r\n           id ={robots[i].id} \r\n           name ={robots[i].name} \r\n           email={robots[i].email}\r\n            />\r\n          );\r\n        })\r\n       }\r\n    </div>\r\n ); \r\n}\r\nexport default Cardlist;\r\n","import React from 'react';\r\n\r\nconst Searchbox = ({searchfield,searchChange}) =>{\r\n    return(<div className = 'pa2'>\r\n    <input className = 'pa3 ba b--blue bg- lightest green'\r\n    type = 'search'\r\n    placeholder = \"search bots\"\r\n     onChange = {searchChange}/>\r\n      </div>\r\n)\r\n\r\n}\r\n\r\nexport default Searchbox;","export const robots = [\n  {\n    id: 1,\n    name: 'Vikram',\n    username: 'vik123',\n    email: 'Sincere@april.biz'\n  },\n  {\n    id: 2,\n    name: 'Kamal',\n    username: 'AntKamal',\n    email: 'Shanna@melissa.tv'\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net'\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org'\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca'\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info'\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz'\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me'\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io'\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz'\n  }\n];\n","import React from 'react';\r\n\r\nconst Scroll = (props) =>{\r\n    return(\r\n        <div style = {{overflowY:\"scroll\", border:\"10px Solid Black\",height:'800px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Scroll;","import React,{Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor()\r\n    {\r\n        super();\r\n        this.state = {\r\n            hasError:false\r\n        }\r\n    };\r\n    componentDidCatch(error,info){\r\n        this.setState({hasError:true})\r\n    }\r\n  render(){\r\n      if (this.state.hasError){\r\n          return <h1>\r\n              OHH Error Done..\r\n          </h1>} \r\n      return this.props.children\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React, {Component} from 'react';\nimport Cardlist from '../components/Cardlist';\nimport Searchbox from '../components/Searchbox';\nimport {robots}  from '../robots.js';\nimport './App.css';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/Error';\n\n\nclass App extends Component { \n  constructor() {\n\n    super()\n   this.state = {\n     robots: robots,\n     searchfield: \"\"\n    }\n  }\n  componentDidMount() {\n    fetch ('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users=>this.setState({ robots:users}));\n  }\n \n  \n   onSearchchange = (event)=> {\n     this.setState({searchfield: event.target.value });\n     }\n   \n     render() {\n         const {robots,searchfield} = this.state;\n       const filterbots = robots.filter(robots =>{\n         return robots.name.toLowerCase().includes(searchfield.toLowerCase())\n       })\n       \n         return !robots.length ?\n         <h1>Assembling Bots</h1> :\n         (\n          <div className = 'tc'>\n          <h1 className='f1' >Bot Buddies</h1>\n          <Searchbox searchChange = {this.onSearchchange}  />\n          <Scroll>\n            <ErrorBoundary>\n              <Cardlist robots={filterbots}/>\n             </ErrorBoundary>\n          </Scroll>\n           </div>\n          );\n       }\n\n       \n     \n     }\n   export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport 'tachyons';\n\n\n\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( <>\n<App/>\n\n</>,\n  \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}